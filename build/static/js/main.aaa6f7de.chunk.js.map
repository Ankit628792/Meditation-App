{"version":3,"sources":["StyledProgressbar.js","playSound.js","StyledSlider.js","App.js","serviceWorker.js","index.js"],"names":["StyledProgressbar","props","react_default","a","createElement","dist_default","percentage","text","strokeWidth","styles","root","path","stroke","strokeLinecap","transition","trail","fill","fontSize","SoundComponent","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSongPlaying","bind","assertThisInitialized","state","position","loopCount","_ref","duration","setState","pos","timer","document","querySelector","min","Math","floor","sec","slice","innerHTML","concat","funcPerc","console","log","desiredT","_this2","lib_default","url","playStatus","onPlaying","onFinishedPlaying","onStop","volume","Component","StyledSlider","es","assign","style","height","padding","handleStyle","display","railStyle","margin","borderRadius","backgroundColor","opacity","trackStyle","playButton","rainAudio","loudVolumeIcon","quietVolumeIcon","noVolumeIcon","rainImg","App","volumeChange","value","mute","volumeIcon","pbuttonUrl","audioStatus","Sound","status","STOPPED","timeValues","audioNames","seekCurrentPosition","audioUrl","bgImg","desiredTime","timeHovered","audioHovered","x","PLAYING","PAUSED","name","JSON","stringify","audioName","replace","timeBtnClass","timeOptions","map","key","onMouseEnter","handleTimeHover","onMouseLeave","className","onClick","timeSelect","audioOptions","handleAudioHover","toLowerCase","audioSelect","backgroundImage","src","alt","e","playPause","toggleMute","src_StyledSlider","id","onChange","step","max","src_StyledProgressbar","playSound","moveSeek","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aaa6f7de.chunk.js","sourcesContent":["import React from 'react';\nimport CircularProgressbar from 'react-circular-progressbar';\n\nfunction StyledProgressbar(props) {\n  return (\n    <CircularProgressbar\n      percentage={props.percentage}\n      text={props.text}\n      // Path width must be customized with strokeWidth,\n      // since it informs dimension calculations.\n      strokeWidth={3}\n      // You can override styles either by specifying this \"styles\" prop,\n      // or by overriding the default CSS here:\n      // https://github.com/iqnivek/react-circular-progressbar/blob/master/src/styles.css\n      styles={{\n        // Customize the root svg element\n        root: {},\n        // Customize the path, i.e. the part that's \"complete\"\n        path: {\n          // Tweak path color:\n          stroke: '#0086ffcc',\n          // Tweak path to use flat or rounded ends:\n          strokeLinecap: 'butt',\n          // Tweak transition animation:\n          transition: 'stroke-dashoffset 0.5s ease 0s',\n        },\n        // Customize the circle behind the path\n        trail: {\n          // Tweak the trail color:\n          stroke: '#ffffffcc',\n        },\n        // Customize the text\n        text: {\n          // Tweak text color:\n          fill: '#f88',\n          // Tweak text size:\n          fontSize: '30px',\n        },\n      }}\n    />\n  );\n}\nexport default StyledProgressbar;\n","import React, { Component } from 'react'\nimport Sound from 'react-sound'\n\nclass SoundComponent extends Component {\n  constructor(props) {\n    super(props)\n    this.handleSongPlaying = this.handleSongPlaying.bind(this)\n    this.state = {\n      position: 0,\n      loopCount: 0,\n    }\n  }\n\n  handleSongPlaying({ position, duration }) {\n    this.setState({ position })\n\n    var pos = position + this.state.loopCount * duration //loopCount to multiply for duration\n    const timer = document.querySelector('.timer')\n    var min = Math.floor(pos / (1000 * 60))\n    var sec = Math.floor((pos / 1000) % 60)\n\n    min = ('0' + min).slice(-2)\n    sec = ('0' + sec).slice(-2)\n\n    timer.innerHTML = `${min} : ${sec}`\n    this.props.funcPerc(pos / 1000)\n\n    console.log(Math.floor(pos / 1000) + ', ' + this.props.desiredT)\n  }\n\n  render() {\n    return (\n      <Sound\n        url={this.props.url}\n        playStatus={this.props.playStatus}\n        onPlaying={this.handleSongPlaying}\n        onFinishedPlaying={() =>\n          this.setState({ loopCount: this.state.loopCount + 1, position: 0 })\n        }\n        onStop={() => this.setState({ loopCount: 0, position: 0 })}\n        position={this.state.position}\n        volume={this.props.volume}\n      />\n    )\n  }\n}\n\nexport default SoundComponent\n","import React from 'react'\nimport Slider from 'rc-slider'\nimport 'rc-slider/assets/index.css';\n\nfunction StyledSlider (props) {\n    // Overall style\n    const style  = { height: 20, padding: 0 }\n    // The style used for handle. \n    const handleStyle = { display: \"none\" }\n    // The style used for the track base color.\n    const railStyle = { margin: 0, borderRadius: 0, height: 20, backgroundColor: '#ffffff', opacity: .2 }\n    // The style used for track\n    const trackStyle = { borderRadius: 0, height: 20, backgroundColor: '#ffffff' }\n    return (\n        <Slider\n            style={style}\n            handleStyle={handleStyle}\n            railStyle={railStyle}\n            trackStyle={trackStyle}\n            {...props} />\n    )\n}\n\nexport default StyledSlider\n","import React, { Component } from 'react'\n// import logo from './logo.svg';\nimport StyledProgressbar from './StyledProgressbar'\nimport Sound from 'react-sound'\nimport SoundComponent from './playSound'\nimport StyledSlider from './StyledSlider';\nimport 'react-circular-progressbar/dist/styles.css'\nimport './App.css'\n\nconst playButton = 'svg/play.svg'\nconst pauseButton = 'svg/pause.svg'\n\nconst rainAudio = 'audio/rain.mp3'\nconst forestAudio = 'audio/forest.mp3'\nconst parkAudio = 'audio/park.mp3'\nconst streamAudio = 'audio/stream.mp3'\nconst wavesAudio = 'audio/waves.mp3'\n\nconst loudVolumeIcon = \"svg/volume-2.svg\";\nconst quietVolumeIcon = \"svg/volume-1.svg\";\nconst noVolumeIcon = \"svg/volume-x.svg\";\n\nconst rainImg = 'img/rain.jpg'\nconst forestImg = 'img/forest.jpg'\nconst parkImg = 'img/park.jpg'\nconst streamImg = 'img/stream.jpg'\nconst wavesImg = 'img/waves.jpg'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      pbuttonUrl          : playButton,\n      audioStatus         : Sound.status.STOPPED,\n      timeValues          : [120, 300, 600, 900],\n      audioNames          : [\"Rain\", \"Forest\", \"Park\", \"Stream\", \"Waves\"],\n      seekCurrentPosition : 0,\n      audioUrl            : rainAudio,      // Default\n      bgImg               : rainImg,\n      desiredTime         : 120,            // Default\n      timeHovered         : false,\n      audioHovered        : false,\n      volume              : 100,            // Default\n      mute                : false,          // Default\n      volumeIcon          : loudVolumeIcon,\n\n    }\n  }\n\n  timeSelect(x) {\n    this.setState({\n      desiredTime: x.duration,\n    })\n  }\n\n  playPause() {\n    console.log('plaPayse')\n    if (this.state.pbuttonUrl === playButton) {\n      this.setState({\n        pbuttonUrl: pauseButton,\n        audioStatus: Sound.status.PLAYING,\n      })\n    } else if (this.state.pbuttonUrl === pauseButton) {\n      this.setState({\n        pbuttonUrl: playButton,\n        audioStatus: Sound.status.PAUSED,\n      })\n    }\n  }\n\n  audioSelect(name) {\n    var x = JSON.stringify(name.audioName).replace(/[\"]+/g, '')\n\n    if (x === this.state.audioNames[1]) {\n      this.setState({\n        audioUrl: forestAudio,\n        bgImg: forestImg,\n      })\n    } else if (x === this.state.audioNames[2]) {\n      this.setState({\n        audioUrl: parkAudio,\n        bgImg: parkImg,\n      })\n    } else if (x === this.state.audioNames[3]) {\n      this.setState({\n        audioUrl: streamAudio,\n        bgImg: streamImg,\n      })\n    } else if (x === this.state.audioNames[4]) {\n      this.setState({\n        audioUrl: wavesAudio,\n        bgImg: wavesImg,\n      })\n    } else {\n      this.setState({\n        audioUrl: rainAudio,\n        bgImg: rainImg,\n      })\n    }\n  }\n\n  moveSeek(pos) {\n    this.setState({ seekCurrentPosition: (pos / this.state.desiredTime) * 100 })\n\n    if (Math.floor(pos) === this.state.desiredTime) {\n      this.setState({\n        pbuttonUrl: playButton,\n        audioStatus: Sound.status.STOPPED,\n      })\n    }\n  }\n\n  handleTimeHover() {\n    this.setState({\n      timeHovered: !this.state.timeHovered\n    });\n  }\n\n  handleAudioHover() {\n    this.setState({\n      audioHovered: !this.state.audioHovered\n    });\n  }\n\n  volumeChange = (value) => {\n    this.setState({\n      volume: this.state.mute ? this.state.volume : value,\n      volumeIcon: this.state.mute || value === 0 ? noVolumeIcon : value <= 50 ? quietVolumeIcon : loudVolumeIcon\n    });\n  }\n\n  toggleMute() {\n    this.setState({\n      volumeIcon: !this.state.mute ? noVolumeIcon : this.state.volume <= 50 ? quietVolumeIcon : loudVolumeIcon,\n      mute: !this.state.mute,\n    });\n  }\n\n  render() {\n\n    console.log(this.state.timeBtnClass);\n    const timeOptions = this.state.timeValues.map((duration) =>\n      <button key={duration} onMouseEnter={this.handleTimeHover.bind(this)} onMouseLeave={this.handleTimeHover.bind(this)} className={ !this.state.timeHovered && duration === this.state.desiredTime \n                                          ? \"active\" : \"\" } onClick={ () => {this.timeSelect({duration})} }>{duration/60} Minutes</button>\n    );\n\n    const audioOptions = this.state.audioNames.map((audioName) =>\n      <button key={audioName} onMouseEnter={this.handleAudioHover.bind(this)} onMouseLeave={this.handleAudioHover.bind(this)} className={ !this.state.audioHovered && this.state.audioUrl === \"audio/\" + audioName.toLowerCase() + \".mp3\" \n                                          ? \"active\" : \"\" } onClick={ () => {this.audioSelect({audioName})} }>{audioName}</button>\n    );\n\n    return (\n      <div className=\"App\">\n        <div className=\"bg-overlay\"></div>\n        <div className=\"bg\" style={{ backgroundImage: `url(${this.state.bgImg})` }} />\n        <div className=\"time-menu\">{timeOptions}</div>\n        <div className=\"player-container\">\n          <img className=\"playPause\" src={this.state.pbuttonUrl} alt=\"Play\" onClick={(e) => { this.playPause() }} />\n\n          <div className=\"volume-control\">\n            <img onClick={this.toggleMute.bind(this)} className=\"volume-icon\" src={this.state.volumeIcon} alt=\"\" />\n            &nbsp;\n            <div className=\"volume-slider\">\n              <StyledSlider id='slider'  onChange={this.volumeChange} step={1} min={0} max={100} value={this.state.mute ? 0 : this.state.volume} />\n            </div>\n          </div>\n\n          <div className=\"audioSeek\">\n            <StyledProgressbar id='seek' percentage={this.state.seekCurrentPosition} />\n          </div>\n\n          <SoundComponent playStatus={this.state.audioStatus} url={this.state.audioUrl} funcPerc={this.moveSeek.bind(this)} desiredT={this.state.desiredTime} volume={this.state.mute ? 0 : this.state.volume} />\n          <div className=\"timer\">00 : 00</div>\n        </div>\n\n        <div className=\"audio-menu\">\n          {audioOptions}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}